import java.util.*;
import java.lang.String;


public class AES {
  private static int Nb = 4;
  //<editor-fold desc="Sbox 2D Array">
  private static char[][] sBox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
          {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
          {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
          {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
          {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
          {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
          {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
          {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
          {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
          {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
          {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
          {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
          {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
          {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
          {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
          {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
  //</editor-fold>

  //<editor-fold desc="rcon array">
  private static char rcon[] = {
          0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
          0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
          0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
          0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
          0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
          0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
          0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
          0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
          0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
          0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
          0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
          0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
          0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
          0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
          0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
          0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };
  //</editor-fold>


  //<editor-fold desc="galois">
  static int[][] galois =
          {{0x02, 0x03, 0x01, 0x01},
                  {0x01, 0x02, 0x03, 0x01},
                  {0x01, 0x01, 0x02, 0x03},
                  {0x03, 0x01, 0x01, 0x02}};
  //</editor-fold>

  //<editor-fold desc="tb2">
  static int[][] tb2 = {{0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e},
          {0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e},
          {0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e},
          {0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e},
          {0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e},
          {0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe},
          {0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde},
          {0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe},
          {0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05},
          {0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25},
          {0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45},
          {0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65},
          {0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85},
          {0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5},
          {0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5},
          {0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5}};
  //</editor-fold>

  //<editor-fold desc="tb3">
  static int[][] tb3 = {{0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11},
          {0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21},
          {0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71},
          {0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41},
          {0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1},
          {0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1},
          {0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1},
          {0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81},
          {0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a},
          {0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba},
          {0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea},
          {0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda},
          {0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a},
          {0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a},
          {0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a},
          {0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a}};
  //</editor-fold>

  public static void main(String[] args) {
    char[][] test = {{0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}};
    System.out.println();
    char[] key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    char[][] keyGrid = keyToGrid(key);
    char[][] keyExpand = keyExpand(keyGrid);
    for (int k = 0; k < 10; k++) {
      addRoundKey(test, keyExpand, k);
      System.out.println("After addRoundKey");
      for (int i = 0; i < test[0].length; i++) {
        for (int j = 0; j < test.length; j++) {
          System.out.printf("%02x ", (byte) test[j][i]);
        }
      }
      System.out.println();
      subBytes(test);
      System.out.println("After subBytes");
      for (int i = 0; i < test[0].length; i++) {
        for (int j = 0; j < test.length; j++) {
          System.out.printf("%02x ", (byte) test[j][i]);
        }
      }
      shiftRows(test);
      System.out.println();
      System.out.println("After shiftRows");
      for (int i = 0; i < test[0].length; i++) {
        for (int j = 0; j < test.length; j++) {
          System.out.printf("%02x ", (byte) test[j][i]);
        }
      }
      System.out.println();
      if (k < 9) {
        mixColumns(test);
        System.out.println("After mixCol");
        for (int i = 0; i < test[0].length; i++) {
          for (int j = 0; j < test.length; j++) {
            System.out.printf("%02x ", (byte) test[j][i]);
          }
        }
        System.out.println();
      }
    }
    addRoundKey(test, keyExpand, 10);
    for (int i = 0; i < test[0].length; i++) {
      for (int j = 0; j < test.length; j++) {
        System.out.printf("%02x ", (byte) test[j][i]);
      }
    }
    System.out.println();


  }

  private static void subBytes(char[][] state) {
    int temp;
    int first;
    int second;
    for (int i = 0; i < state.length; i++) {
      for (int j = 0; j < state[0].length; j++) {
        temp = state [i][j];
        first = temp & 0xF0;
        first = first >> 4;
        second = temp & 0x0F;
        state[i][j] = sBox[first][second];
      }
    }
  }

  private static char[][] keyToGrid(char[] b) {
    char[][] result;

    if (b.length == 16) {
      result = new char[4][4];
    }
    else {
      result = new char [4][8];
    }
    for (int i = 0; i < result[0].length; i++) {
      for (int j = 0; j < result.length; j++) {
        result[j][i] = b[i * 4 + j];
      }
    }
    return result;
  }

  private static char[][] keyExpand (char[][] key) {
    char[][] result;
    if (key[0].length == 4) {
      result = new char[4][44];
    }
    else {
      result = new char[4][60];
    }
    for (int i = 0; i < key[0].length; i++) {
      for(int j = 0; j < key.length; j++) {
        result[i][j] = key[i][j];
      }
    }
    for (int k = 0; k < 10; k++) {

      for (int l = 0; l < 4; l++) {
        //word 4
        result[l][(4 * k) + 4] = (char) (result[l][(4 * k)] ^ gFunc(result, l, (4 * k) + 3, k));
        //words 5-7 and so on
        result[l][(4 * k) + 5] = (char) (result[l][(4 * k) + 4] ^ result[l][(4 * k) + 1]);
        result[l][(4 * k) + 6] = (char) (result[l][(4 * k) + 5] ^ result[l][(4 * k) + 2]);
        result[l][(4 * k) + 7] = (char) (result[l][(4 * k) + 6] ^ result[l][(4 * k) + 3]);
      }
    }
    return result;
  }

  private static char gFunc(char[][] res, int row, int col, int round) {
    char result;
    char[] wordCopy = new char[4];
    for (int i = 0; i < 4; i++) {
      wordCopy[i] = res[i][col];
    }
    //Circular Rotation
    char temp;
    if (row < 3) {
      temp = wordCopy[row + 1];
    }
    else {
      temp = wordCopy[0];
    }
    int first;
    int second;
    int temp2;
    first = temp & 0xF0;
    first = first >> 4;
    second = temp & 0x0F;
    temp = sBox[first][second];
    //round constant
    if (row == 0) {
      temp2 = temp ^ rcon[round + 1];
      result = (char) temp2;
    }
    else {
      result = (char) temp;
    }


    return result;
  }

  private static void addRoundKey(char[][] state, char[][] expandKey, int round) {
    for (int i = 0; i < state.length; i++) {
      for (int j = 0; j < state[0].length; j++) {
        state[i][j] = (char) (expandKey[i][round * 4 + j] ^ state[i][j]);
      }
    }
  }

  static void shiftRows(char[][] state) {

    char[] temp = new char[4];
    for (int r = 1; r < 4; r++) {
      for (int c = 0; c < Nb; c++)
        temp[c] = state[r][(c + r)  % Nb];

      for (int c = 0; c < Nb; c++)
        state[r][c] = temp[c];
    }
  }

  static void mixColumns(char[][] arr) {
    char[][] temp_state = new char[4][4];
    for(int i = 0; i < 4; i++)
      System.arraycopy(arr[i], 0, temp_state[i], 0, 4);

    for (int i = 0; i < 4; i++)
      for (int j = 0; j < 4; j++)
        arr[i][j] = mult(temp_state, i, j);
  }

  static char mult(char[][] arr, int i, int j){
    int sum = 0;
    for (int k = 0; k < 4; k++) {
      int a = galois[i][k];
      int b = arr[k][j];
      int r = b / 16;
      int c = b % 16;

      switch(a) {
        case 1:
          sum ^= b;
          break;
        case 2:
        case 3:
          sum ^= a == 2 ? tb2[r][c] : tb3[r][c];
          break;
        default:
          sum ^= 0;

      }
    }
    return (char) sum;
  }

  static void printState(int[][] state){
    for(int i = 0; i < 4; i++)
      for(int j = 0; j < Nb; j++)
        System.out.printf("%x", state[j][i]);
    System.out.println("");
  }

  static void makeState(int[] bytes, int[][] state) {
    int index = 0;
    for(int i = 0; i < 4; i++)
      for(int j = 0; j < Nb; j++)
        state[j][i] = bytes[index++];
  }

  static void stateToBytes(int[][] state, int[] bytes) {
    int index = 0;
    for(int i = 0; i < 4; i++)
      for(int j = 0; j < Nb; j++)
        bytes[index++] = state[j][i];
  }
}

